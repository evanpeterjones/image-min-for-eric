<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="3047d786-38e9-41eb-a8f1-05854da29742" name="Default Changelist" comment="">
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__com_fifesoft_rsyntaxtextarea_2_5_6.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__com_jgoodies_forms_1_2_1.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__com_miglayout_miglayout_3_7_4.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__j18n_1_0_2.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_swinglabs_swingx_swingx_action_1_6_3.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_swinglabs_swingx_swingx_autocomplete_1_6_3.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_swinglabs_swingx_swingx_common_1_6_3.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_swinglabs_swingx_swingx_core_1_6_3.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_swinglabs_swingx_swingx_painters_1_6_3.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__org_swinglabs_swingx_swingx_plaf_1_6_3.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/libraries/Leiningen__seesaw_1_5_0.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/image-min-for-eric.iml" beforeDir="false" afterPath="$PROJECT_DIR$/image-min-for-eric.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/project.clj" beforeDir="false" afterPath="$PROJECT_DIR$/project.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/image_min_for_eric/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/image_min_for_eric/core.clj" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CompilerWorkspaceConfiguration">
    <option name="PARALLEL_COMPILATION" value="true" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitSEFilterConfiguration">
    <file-type-list>
      <filtered-out-file-type name="LOCAL_BRANCH" />
      <filtered-out-file-type name="REMOTE_BRANCH" />
      <filtered-out-file-type name="TAG" />
      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
    </file-type-list>
  </component>
  <component name="HighlightingSettingsPerFile">
    <setting file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.1/clojure-1.10.1-sources.jar!/clojure/lang/IAtom2.java" root0="SKIP_INSPECTION" />
    <setting file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.1/clojure-1.10.1-sources.jar!/clojure/lang/ARef.java" root0="SKIP_INSPECTION" />
    <setting file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.1/clojure-1.10.1-sources.jar!/clojure/lang/Agent.java" root0="SKIP_INSPECTION" />
    <setting file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj" root0="SKIP_INSPECTION" />
    <setting file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.1/clojure-1.10.1-sources.jar!/clojure/lang/Atom.java" root0="SKIP_INSPECTION" />
    <setting file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.1/clojure-1.10.1-sources.jar!/clojure/lang/IRef.java" root0="SKIP_INSPECTION" />
  </component>
  <component name="ProjectId" id="1wPqWwtYOlaEij89ONcSAWwubYY" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="ASKED_SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="project.structure.last.edited" value="SDKs" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
    <property name="settings.editor.selected.configurable" value="configurable.group.build" />
  </component>
  <component name="ReplState" timestamp="1630001192488">{:repl-history {:ide [], :local [{:command &quot;(ns image-min-for-eric.core\n  (:require [fn-fx.fx-dom :as dom]\n            [fn-fx.diff :refer [component defui render should-update?]]\n            [fn-fx.controls :as ui])\n  (:gen-class))&quot;, :offset 187, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [(ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;What needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 771, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :default\n  [state event]\n  (println \&quot;No hander for event \&quot; (:type event) event)\n  state)&quot;, :offset 112, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [(ui/file-chooser\n                        :id ::directory-name\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n                      (ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;What needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 983, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [(ui/file-chooser\n                        :id ::directory-name\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n                      (ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;Whatcha needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 986, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui Stage\n       (render [this args]\n         (ui/stage\n           :title \&quot;ToDos\&quot;\n           :min-height 600\n           :listen/height {:event :height-change\n                           :fn-fx/include {::new-item #{:text}}}\n           :shown true\n           :scene (ui/scene\n                    :root (main-window args)))))&quot;, :offset 325, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [(ui/file-chooser\n                        :id ::directory-name\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::directory-name #{:text}}})\n                      (ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;Whatcha needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 992, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defn -main []\n  (let [;; Data State holds the business logic of our app\n        data-state (atom {:todos [{:done? false\n                                   :text  \&quot;Take out trash\&quot;}]})\n\n        ;; handler-fn handles events from the ui and updates the data state\n        handler-fn (fn [event]\n                     (try\n                       (swap! data-state handle-event event)\n                       (catch Throwable ex\n                         (println ex))))\n\n        ;; ui-state holds the most recent state of the ui\n        ui-state   (agent (dom/app (stage @data-state) handler-fn))]\n\n    ;; Every time the data-state changes, queue up an update of the UI\n    (add-watch data-state :ui (fn [_ _ _ _]\n                                (send ui-state\n                                      (fn [old-ui]\n                                        (try\n                                          (dom/update-app old-ui (stage @data-state))\n                                          (catch Throwable ex\n                                            (println ex)))))))))&quot;, :offset 1062, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [(ui/file-chooser\n                        :id ::directory-name\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::directory-name #{:text}}})\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 683, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [(ui/file-chooser\n                        :id ::directory-name\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::directory-name #{:text}}})\n\n                      (ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;Whatcha needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 994, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [\n\n                      (ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;Whatcha needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 799, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [\n\n                      (ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;What needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 796, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [\n\n                      (ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;What needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n\n                      (ui/text-field\n                        :id ::new-item-2\n                        :prompt-text \&quot;What needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item-2 #{:text}}})\n\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 1107, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [(ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;What needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n\n                      (ui/file-chooser\n                        :id ::file-chooser\n                        :prompt-text \&quot;Select image folder\&quot;\n                        :font main-font\n                        :on-action {:event :check-folder\n                                    :fn-fx/include {::file-chooser #{:text}}})\n\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 1090, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [(ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;What needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n\n                      \n\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 796, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :check-folder\n  [state {:keys [folder]}]\n  (update-in state [:todos] (fn [itms]\n                              (println itms idx)\n                              (vec (concat (take idx itms)\n                                           (drop (inc idx) itms))))))&quot;, :offset 281, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :check-folder\n  [state {:keys [folder]}]\n  (update-in state [:todos] (fn [itms]\n                              (println itms folder)\n                              ;; code to check what files exist in the folder\n                              )))&quot;, :offset 267, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [(ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;What needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n\n                      (ui/file-chooser\n                        )\n\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 838, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [(ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;What needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n\n                      (ui/file-chooser\n                        :id ::folder-name\n                        :prompt-text \&quot;Select image folder\&quot;\n                        :font main-font\n                        :on-action {:event :check-folder\n                                    :fn-fx/include {::folder-name #{:text}}})\n\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 1088, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets\n\n                     :top-right-bottom-left 25)\n           :children [(ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;What needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n\n                      (ui/file-chooser\n                        :titleProperty \&quot;Test\&quot;\n                        )\n\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 884, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n\n            :padding (ui/insets :top-right-bottom-left 25)\n           :children [(ui/text-field\n                        :id ::new-item\n                        :prompt-text \&quot;What needs to be done?\&quot;\n                        :font main-font\n                        :on-action {:event :add-item\n                                    :fn-fx/include {::new-item #{:text}}})\n\n                      (ui/file-chooser\n                        :titleProperty \&quot;Test\&quot;\n                        )\n\n                      (ui/v-box\n                        :children (map-indexed\n                                       (fn [idx todo]\n                                         (todo-item (assoc todo :idx idx)))\n                                       todos))])))&quot;, :offset 862, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :add-item\n  [state {:keys [fn-fx/includes]}]\n  (update-in state [:todos] conj {:done? false\n                                  :text (get-in includes [::new-item :text])}))&quot;, :offset 195, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :delete-item\n  [state {:keys [idx]}]\n  (update-in state [:todos] (fn [itms]\n                              (println itms idx)\n                              (vec (concat (take idx itms)\n                                           (drop (inc idx) itms))))))&quot;, :offset 277, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui Stage\n       (render [this args]\n         (ui/stage\n           :title \&quot;Image Converter for Éric ♡\&quot;\n           :min-height 600\n           :listen/height {:event :height-change\n                           :fn-fx/include {::new-item #{:text}}}\n           :shown true\n           :scene (ui/scene\n                    :root (main-window args)))))&quot;, :offset 346, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(-main)&quot;, :offset 7, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(when (not= 0 (count todos))\n                         (ui/button :text \&quot;Load Folder\&quot;\n                                    :font main-font\n                                    :on-action {:event :check-folder\n                                                :fn-fx/include {::input #{:text}}}))\n\n                       (ui/text-field\n                        :id ::input\n                        :prompt-text \&quot;Directory\&quot;\n                        :font main-font\n                        :on-action {:event :check-folder\n                                    :fn-fx/include {::input #{:text}}})\n\n                       (ui/v-box\n                         :children (map-indexed\n                                    (fn [idx todo]\n                                      (todo-item (assoc todo :idx idx)))\n                                    todos))])))&quot;, :offset 1043, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defn -main []\n  (let [;; Data State holds the business logic of our app\n        data-state (atom {:todos [{:done? false\n                                   :text  \&quot;Take out trash\&quot;}]})\n\n        ;; handler-fn handles events from the ui and updates the data state\n        handler-fn (fn [event]\n                     (try\n                       (println event)\n                       (swap! data-state handle-event event)\n                       (catch Throwable ex\n                         (println ex))))\n\n        ;; ui-state holds the most recent state of the ui\n        ui-state   (agent (dom/app (stage @data-state) handler-fn))]\n\n    ;; Every time the data-state changes, queue up an update of the UI\n    (add-watch data-state :ui (fn [_ _ _ _]\n                                (send ui-state\n                                      (fn [old-ui]\n                                        (try\n                                          (dom/update-app old-ui (stage @data-state))\n                                          (catch Throwable ex\n                                            (println ex)))))))))&quot;, :offset 1101, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(ns image-min-for-eric.core\n (:require [clojure.java.io :as io]\n            [fn-fx.fx-dom :as dom]\n            [fn-fx.diff :refer [component defui render should-update?]]\n            [fn-fx.controls :as ui])\n  (:gen-class))&quot;, :offset 223, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(when (not= 0 (count todos))\n                         (ui/button :text \&quot;Load Folder\&quot;\n                                    :font main-font\n                                    :on-action {:event :check-folder\n                                                :fn-fx/include {::input #{:text}}}))\n\n                       (ui/file-chooser\n                         :id :file-directory)\n\n                       (ui/v-box\n                         :children (map-indexed\n                                    (fn [idx todo]\n                                      (todo-item (assoc todo :idx idx)))\n                                    todos))])))&quot;, :offset 837, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui Stage\n       (render [this args]\n         (ui/stage\n           :title \&quot;Image Converter\&quot;                         ;; for Éric ♡\n           :min-height 600\n           :listen/height {:event :height-change\n                           :fn-fx/include {::input #{:text}}}\n           :shown true\n           :scene (ui/scene\n                    :root (main-window args)))))&quot;, :offset 370, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(when (not= 0 (count todos))\n                         (ui/button :text \&quot;Load Folder\&quot;\n                                    :font main-font\n                                    :on-action {:event :check-folder\n                                                :fn-fx/include {::input #{:text}}}))\n\n                       (ui/text-field\n                        :id ::input\n                        :prompt-text \&quot;Directory\&quot;\n                        :font main-font\n                        :on-action {:event :check-folder\n                                    :fn-fx/include {::input #{:text}}})\n\n                       (ui/file-chooser\n                         :id :file-directory\n                         :prompt-text \&quot;D\&quot;)\n\n                       (ui/v-box\n                         :children (map-indexed\n                                    (fn [idx todo]\n                                      (todo-item (assoc todo :idx idx)))\n                                    todos))])))&quot;, :offset 1172, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(when (not= 0 (count todos))\n                         (ui/button :text \&quot;Load Folder\&quot;\n                                    :font main-font\n                                    :on-action {:event :check-folder\n                                                :fn-fx/include {::input #{:text}}}))\n\n                       (ui/text-field\n                        :id ::input\n                        :prompt-text \&quot;Directory\&quot;\n                        :font main-font\n                        :on-action {:event :check-folder\n                                    :fn-fx/include {::input #{:text}}})\n                       \n\n                       (ui/v-box\n                         :children (map-indexed\n                                    (fn [idx todo]\n                                      (todo-item (assoc todo :idx idx)))\n                                    todos))])))&quot;, :offset 1067, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;@window&quot;, :offset 7, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/scroll-pane\n                         :content [(when (not= 0 (count todos))\n                                     (ui/button :text \&quot;Load Folder\&quot;\n                                                :font main-font\n                                                :on-action {:event :check-folder\n                                                            :fn-fx/include {::input #{:text}}}))\n\n                                   (ui/text-field\n                                     :id ::input\n                                     :prompt-text \&quot;Directory\&quot;\n                                     :font main-font\n                                     :on-action {:event :check-folder\n                                                 :fn-fx/include {::input #{:text}}})\n\n\n\n                                   (ui/v-box\n                                     :children (map-indexed\n                                                 (fn [idx todo]\n                                                   (todo-item (assoc todo :idx idx)))\n                                                 todos))])])))&quot;, :offset 1286, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/scroll-pane\n                         :match-height true\n                         :match-width true\n                         :content [(when (not= 0 (count todos))\n                                     (ui/button :text \&quot;Load Folder\&quot;\n                                                :font main-font\n                                                :on-action {:event :check-folder\n                                                            :fn-fx/include {::input #{:text}}}))\n\n                                   (ui/text-field\n                                     :id ::input\n                                     :prompt-text \&quot;Directory\&quot;\n                                     :font main-font\n                                     :on-action {:event :check-folder\n                                                 :fn-fx/include {::input #{:text}}})\n\n\n\n                                   (ui/v-box\n                                     :children (map-indexed\n                                                 (fn [idx todo]\n                                                   (todo-item (assoc todo :idx idx)))\n                                                 todos))])])))&quot;, :offset 1373, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/scroll-pane\n                         :fit-to-height true\n                         :fit-to-width true\n                         :content [(when (not= 0 (count todos))\n                                     (ui/button :text \&quot;Load Folder\&quot;\n                                                :font main-font\n                                                :on-action {:event :check-folder\n                                                            :fn-fx/include {::input #{:text}}}))\n\n                                   (ui/text-field\n                                     :id ::input\n                                     :prompt-text \&quot;Directory\&quot;\n                                     :font main-font\n                                     :on-action {:event :check-folder\n                                                 :fn-fx/include {::input #{:text}}})\n\n\n\n                                   (ui/v-box\n                                     :children (map-indexed\n                                                 (fn [idx todo]\n                                                   (todo-item (assoc todo :idx idx)))\n                                                 todos))])])))&quot;, :offset 1375, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/scroll-pane\n                         :fit-to-height true\n                         :fit-to-width true\n                         :min-height 200\n                         :min-width 200\n                         :content [(when (not= 0 (count todos))\n                                     (ui/button :text \&quot;Load Folder\&quot;\n                                                :font main-font\n                                                :on-action {:event :check-folder\n                                                            :fn-fx/include {::input #{:text}}}))\n\n                                   (ui/text-field\n                                     :id ::input\n                                     :prompt-text \&quot;Directory\&quot;\n                                     :font main-font\n                                     :on-action {:event :check-folder\n                                                 :fn-fx/include {::input #{:text}}})\n\n\n\n                                   (ui/v-box\n                                     :children (map-indexed\n                                                 (fn [idx todo]\n                                                   (todo-item (assoc todo :idx idx)))\n                                                 todos))])])))&quot;, :offset 1456, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(when (not= 0 (count todos))\n                         (ui/button :text \&quot;Load Folder\&quot;\n                                    :font main-font\n                                    :on-action {:event :check-folder\n                                                :fn-fx/include {::input #{:text}}}))\n\n                       (ui/text-field\n                         :id ::input\n                         :prompt-text \&quot;Directory\&quot;\n                         :font main-font\n                         :on-action {:event :check-folder\n                                     :fn-fx/include {::input #{:text}}})\n\n                       (ui/v-box\n                         :children (map-indexed\n                                     (fn [idx todo]\n                                       (todo-item (assoc todo :idx idx)))\n                                     todos))])))&quot;, :offset 1051, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :check-folder\n  [state {:keys [fn-fx/includes]}]\n  (let [folder-name (get-in includes [::input :text])\n        folder (.list (io/file folder-name))]\n    (update-in state [:todos] into (map item folder))))&quot;, :offset 228, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :pick-folder\n  [state {:keys [fn-fx/includes]}]\n  (let [folder-name (get-in includes [::input :text])\n        folder (.list (io/file folder-name))]\n    (update-in state [:todos] into (map item folder))))&quot;, :offset 227, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(when (not= 0 (count todos))\n                         (ui/button :text \&quot;Load Folder\&quot;\n                                    :font main-font\n                                    :on-action {:event :pick-folder\n                                                :fn-fx/include {::input #{:text}}}))\n\n                       (ui/text-field\n                         :id ::input\n                         :prompt-text \&quot;Directory\&quot;\n                         :font main-font\n                         :on-action {:event :pick-folder\n                                     :fn-fx/include {::input #{:text}}})\n\n                       (ui/v-box\n                         :children (map-indexed\n                                     (fn [idx todo]\n                                       (todo-item (assoc todo :idx idx)))\n                                     todos))])))&quot;, :offset 1049, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [\n                       (ui/h-box\n                         :content [(ui/button :text \&quot;Load Folder\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})\n\n                                   (ui/button :text \&quot;Load Folder\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})])\n\n                       (ui/v-box\n                         :children (map-indexed\n                                     (fn [idx todo]\n                                       (todo-item (assoc todo :idx idx)))\n                                     todos))])))&quot;, :offset 1099, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/border-pane\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/h-box\n                         :content [(ui/button :text \&quot;Load Folder\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})\n\n                                   (ui/button :text \&quot;Load Folder\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})])\n\n                       (ui/v-box\n                         :children (map-indexed\n                                     (fn [idx todo]\n                                       (todo-item (assoc todo :idx idx)))\n                                     todos))])))&quot;, :offset 1081, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/h-box\n                         :content [(ui/button :text \&quot;Load Folder\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})\n\n                                   (ui/button :text \&quot;Load Folder\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})])\n\n                       (ui/v-box\n                         :children (map-indexed\n                                     (fn [idx todo]\n                                       (todo-item (assoc todo :idx idx)))\n                                     todos))])))&quot;, :offset 1075, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/h-box\n                         :alignment (javafx.geometry.Pos/CENTER)\n                         :content [(ui/button :text \&quot;Load Folder\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})\n\n                                   (ui/button :text \&quot;Load Folder\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})])\n\n                       (ui/v-box\n                         :children (map-indexed\n                                     (fn [idx todo]\n                                       (todo-item (assoc todo :idx idx)))\n                                     todos))])))&quot;, :offset 1140, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/h-box\n                         :alignment (javafx.geometry.Pos/CENTER)\n                         :children [(ui/button :text \&quot;Load Folder\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})\n\n                                   (ui/button :text \&quot;Load Folder\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})])\n\n                       (ui/v-box\n                         :children (map-indexed\n                                     (fn [idx todo]\n                                       (todo-item (assoc todo :idx idx)))\n                                     todos))])))&quot;, :offset 1141, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/h-box\n                         :alignment (javafx.geometry.Pos/CENTER)\n                         :children [(ui/button :text \&quot;Select Directory\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})\n\n                                   (ui/button :text \&quot;Process Images\&quot;\n                                              :font main-font\n                                              :padding (ui/insets :left 20)\n                                              :on-action {:event :process-images\n                                                          :fn-fx/include {::input #{:text}}})])\n\n                       (ui/v-box\n                         :children (map-indexed\n                                     (fn [idx todo]\n                                       (todo-item (assoc todo :idx idx)))\n                                     todos))])))&quot;, :offset 1228, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/h-box\n                         :alignment (javafx.geometry.Pos/CENTER)\n                         :children [(ui/button :text \&quot;Select Directory\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})\n\n                                   (ui/button :text \&quot;Process Images\&quot;\n                                              :font main-font\n                                              :padding (ui/insets :top-right-bottom-left 20)\n                                              :on-action {:event :process-images\n                                                          :fn-fx/include {::input #{:text}}})])\n\n                       (ui/v-box\n                         :children (map-indexed\n                                     (fn [idx todo]\n                                       (todo-item (assoc todo :idx idx)))\n                                     todos))])))&quot;, :offset 1245, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/h-box\n                         :padding (ui/insets :top-right-bottom-left 25)\n                         :alignment (javafx.geometry.Pos/CENTER)\n                         :children [(ui/button :text \&quot;Select Directory\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})\n\n                                   (ui/button :text \&quot;Process Images\&quot;\n                                              :font main-font\n                                              :on-action {:event :process-images\n                                                          :fn-fx/include {::input #{:text}}})])\n\n                       (ui/v-box\n                         :children (map-indexed\n                                     (fn [idx todo]\n                                       (todo-item (assoc todo :idx idx)))\n                                     todos))])))&quot;, :offset 1224, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/h-box\n                         :padding (ui/insets :top-right-bottom-left 0 10 0 0)\n                         :alignment (javafx.geometry.Pos/CENTER)\n                         :children [(ui/button :text \&quot;Select Directory\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})\n\n                                   (ui/button :text \&quot;Process Images\&quot;\n                                              :font main-font\n                                              :on-action {:event :process-images\n                                                          :fn-fx/include {::input #{:text}}})])\n\n                       (ui/v-box\n                         :children (map-indexed\n                                     (fn [idx todo]\n                                       (todo-item (assoc todo :idx idx)))\n                                     todos))])))&quot;, :offset 1230, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/h-box\n                         :padding (ui/insets :top-right-bottom-left [0 10 0 0])\n                         :alignment (javafx.geometry.Pos/CENTER)\n                         :children [(ui/button :text \&quot;Select Directory\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})\n\n                                   (ui/button :text \&quot;Process Images\&quot;\n                                              :font main-font\n                                              :on-action {:event :process-images\n                                                          :fn-fx/include {::input #{:text}}})])\n\n                       (ui/v-box\n                         :children (map-indexed\n                                     (fn [idx todo]\n                                       (todo-item (assoc todo :idx idx)))\n                                     todos))])))&quot;, :offset 1232, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :pick-folder\n  [state {:keys [fn-fx/includes]}]\n  (let [window (.getWindow (.getScene (:target (:fn-fx/event includes))))\n        dialog (doto (javafx.stage.FileChooser.) (.setTitle \&quot;Pick Directory\&quot;))\n        file (util/run-and-wait (.showOpenDialog dialog window))\n        data (with-open [reader (io/reader file)]\n               (doall (csv/read-csv reader)))\n\n        folder-name (get-in includes [::input :text])\n        folder (.list (io/file folder-name))]\n    (update-in state [:todos] into (map item folder))))&quot;, :offset 542, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(ns image-min-for-eric.core\n (:require [clojure.java.io :as io]\n            [fn-fx.fx-dom :as dom]\n            [fn-fx.diff :refer [component defui render should-update?]]\n           [fn-fx.controls :as ui]\n           [fn-fx.util :as utils])\n  (:gen-class))&quot;, :offset 256, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :pick-folder\n  [state {:keys [fn-fx/includes]}]\n  (let [window (.getWindow (.getScene (:target (:fn-fx/event includes))))\n        dialog (doto (javafx.stage.FileChooser.) (.setTitle \&quot;Pick Directory\&quot;))\n        file (utils/run-and-wait (.showOpenDialog dialog window))\n        data (with-open [reader (io/reader file)]\n               (doall (csv/read-csv reader)))\n\n        folder-name (get-in includes [::input :text])\n        folder (.list (io/file folder-name))]\n    (update-in state [:todos] into (map item folder))))&quot;, :offset 543, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(def window (-main))&quot;, :offset 20, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(ns image-min-for-eric.core\n (:require [clojure.java.io :as io]\n           [fn-fx.fx-dom :as dom]\n           [fn-fx.diff :refer [component defui render should-update?]]\n           [fn-fx.controls :as ui]\n           [fn-fx.util :as utils])\n  (:gen-class))&quot;, :offset 254, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(def main-font (ui/font :family \&quot;Helvetica\&quot; :size 20))&quot;, :offset 54, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui TodoItem\n       (render [this {:keys [done? idx text]}]\n         (ui/border-pane\n           :padding (ui/insets\n                      :top 10\n                      :bottom 10\n                      :left 0\n                      :right 0)\n           :left (ui/check-box\n                      :font main-font\n                      :text text\n                      :selected done?\n                      :on-action {:event :swap-status :idx idx})\n           :right (ui/button :text \&quot;X\&quot;\n                             :on-action {:event :delete-item :idx idx}))))&quot;, :offset 562, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui MainWindow\n       (render [this {:keys [todos]}]\n          (ui/v-box\n            :style \&quot;-fx-base: rgb(30, 30, 35);\&quot;\n            :padding (ui/insets :top-right-bottom-left 25)\n            :children [(ui/h-box\n                         :alignment (javafx.geometry.Pos/CENTER)\n                         :children [(ui/button :text \&quot;Select Directory\&quot;\n                                              :font main-font\n                                              :on-action {:event :pick-folder\n                                                          :fn-fx/include {::input #{:text}}})\n\n                                   (ui/button :text \&quot;Process Images\&quot;\n                                              :font main-font\n                                              :on-action {:event :process-images\n                                                          :fn-fx/include {::input #{:text}}})])\n\n                       (ui/v-box\n                         :children (map-indexed\n                                     (fn [idx todo]\n                                       (todo-item (assoc todo :idx idx)))\n                                     todos))])))&quot;, :offset 1152, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defui Stage\n       (render [this args]\n         (ui/stage\n           :title \&quot;Image Converter for Éric ♡\&quot;\n           :min-height 600\n           :listen/height {:event :height-change\n                           :fn-fx/include {::input #{:text}}}\n           :shown true\n           :scene (ui/scene\n                    :root (main-window args)))))&quot;, :offset 343, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmulti handle-event (fn [state event]\n                          (:event event)))&quot;, :offset 83, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :height-change\n  [state {:keys [idx]}]\n  (update-in state [:todos idx :done?] (fn [x]\n                                         (not x))))&quot;, :offset 161, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :swap-status\n  [state {:keys [idx]}]\n  (update-in state [:todos idx :done?] (fn [x]\n                                         (not x))))&quot;, :offset 159, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defn item [i]\n  {:done? false :text i})&quot;, :offset 40, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :pick-folder\n  [state {:keys [fn-fx/includes]}]\n  (let [window (.getWindow (.getScene (:target (:fn-fx/event includes))))\n        dialog (doto (javafx.stage.FileChooser.) (.setTitle \&quot;Pick Directory\&quot;))\n        file (utils/run-and-wait (.showOpenDialog dialog window))\n        ;        folder-name (get-in includes [::input :text])\n        folder (.list (io/file file))]\n    (update-in state [:todos] into (map item folder))))&quot;, :offset 448, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :add-item\n  [state {:keys [fn-fx/includes]}]\n  (update-in state [:todos] conj {:done? false\n                                  :text (get-in includes [::input :text])}))&quot;, :offset 192, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :delete-item\n  [state {:keys [idx] :as asdf}]\n  (update-in state [:todos] (fn [itms]\n                              (vec (concat (take idx itms)\n                                           (drop (inc idx) itms))))))&quot;, :offset 237, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defmethod handle-event :default\n  [state event]\n  (println \&quot;No handler for event \&quot; (:type event) event)\n  state)&quot;, :offset 113, :ns &quot;image-min-for-eric.core&quot;} {:command &quot;(defn -main []\n  (let [;; Data State holds the business logic of our app\n        data-state (atom {:todos [{:done? false\n                                   :text  \&quot;Test\&quot;}]})\n\n        ;; handler-fn handles events from the ui and updates the data state\n        handler-fn (fn [event]\n                     (try\n                       (println event)\n                       (swap! data-state handle-event event)\n                       (catch Throwable ex\n                         (println ex))))\n\n        ;; ui-state holds the most recent state of the ui\n        ui-state   (agent (dom/app (stage @data-state) handler-fn))]\n\n    ;; Every time the data-state changes, queue up an update of the UI\n    (add-watch data-state :ui (fn [_ _ _ _]\n                                (send ui-state\n                                      (fn [old-ui]\n                                        (try\n                                          (dom/update-app old-ui (stage @data-state))\n                                          (catch Throwable ex\n                                            (println ex)))))))))&quot;, :offset 1091, :ns &quot;image-min-for-eric.core&quot;}], :remote []}}</component>
  <component name="RunManager" selected="Clojure REPL.REPL">
    <configuration name="REPL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="image-min-for-eric" />
      <setting name="displayName" value="REPL" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="Run" type="ClojureScriptRunConfiguration" factoryName="Clojure Script">
      <module name="image-min-for-eric" />
      <setting name="path" value="" />
      <setting name="namespace" value="image-min-for-eric.core" />
      <setting name="execution" value="LEININGEN" />
      <setting name="profiles" value="uberjar" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure Application.Run" />
      <item itemvalue="Clojure REPL.REPL" />
    </list>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="3047d786-38e9-41eb-a8f1-05854da29742" name="Default Changelist" comment="" />
      <created>1628370609420</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1628370609420</updated>
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
    <option name="oldMeFiltersMigrated" value="true" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj</url>
          <line>445</line>
          <option name="timeStamp" value="2" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>jar://$MAVEN_REPOSITORY$/fn-fx/fn-fx-openjfx11/0.5.0-SNAPSHOT/fn-fx-openjfx11-0.5.0-SNAPSHOT.jar!/fn_fx/render_core.clj</url>
          <line>144</line>
          <option name="timeStamp" value="3" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>